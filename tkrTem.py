# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tkrTem', [dirname(__file__)])
        except ImportError:
            import _tkrTem
            return _tkrTem
        if fp is not None:
            try:
                _mod = imp.load_module('_tkrTem', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tkrTem = swig_import_helper()
    del swig_import_helper
else:
    import _tkrTem
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def tkrVMEInit(*args):
  return _tkrTem.tkrVMEInit(*args)
tkrVMEInit = _tkrTem.tkrVMEInit

def tkrVMEClose():
  return _tkrTem.tkrVMEClose()
tkrVMEClose = _tkrTem.tkrVMEClose

def tkrLoadDataFifo(*args):
  return _tkrTem.tkrLoadDataFifo(*args)
tkrLoadDataFifo = _tkrTem.tkrLoadDataFifo

def tkrLoadL1tFifo(*args):
  return _tkrTem.tkrLoadL1tFifo(*args)
tkrLoadL1tFifo = _tkrTem.tkrLoadL1tFifo

def tkrLoadFinalize():
  return _tkrTem.tkrLoadFinalize()
tkrLoadFinalize = _tkrTem.tkrLoadFinalize

def tkr_dumpFifo(*args):
  return _tkrTem.tkr_dumpFifo(*args)
tkr_dumpFifo = _tkrTem.tkr_dumpFifo

def tkrDump():
  return _tkrTem.tkrDump()
tkrDump = _tkrTem.tkrDump

def tkrCmd_rstGtrc(*args):
  return _tkrTem.tkrCmd_rstGtrc(*args)
tkrCmd_rstGtrc = _tkrTem.tkrCmd_rstGtrc

def tkrCmd_clockOn(*args):
  return _tkrTem.tkrCmd_clockOn(*args)
tkrCmd_clockOn = _tkrTem.tkrCmd_clockOn

def tkrCmd_readEvt(*args):
  return _tkrTem.tkrCmd_readEvt(*args)
tkrCmd_readEvt = _tkrTem.tkrCmd_readEvt

def tkrCmd_gtrcReg(*args):
  return _tkrTem.tkrCmd_gtrcReg(*args)
tkrCmd_gtrcReg = _tkrTem.tkrCmd_gtrcReg

def tkrCmd_rstGtfe(*args):
  return _tkrTem.tkrCmd_rstGtfe(*args)
tkrCmd_rstGtfe = _tkrTem.tkrCmd_rstGtfe

def tkrCmd_rstGtfeFifo(*args):
  return _tkrTem.tkrCmd_rstGtfeFifo(*args)
tkrCmd_rstGtfeFifo = _tkrTem.tkrCmd_rstGtfeFifo

def tkrCmd_strobe(*args):
  return _tkrTem.tkrCmd_strobe(*args)
tkrCmd_strobe = _tkrTem.tkrCmd_strobe

def tkrCmd_gtfeReg(*args):
  return _tkrTem.tkrCmd_gtfeReg(*args)
tkrCmd_gtfeReg = _tkrTem.tkrCmd_gtfeReg

def tkrCmd_gtfeRegt():
  return _tkrTem.tkrCmd_gtfeRegt()
tkrCmd_gtfeRegt = _tkrTem.tkrCmd_gtfeRegt

def temSetCheckSum(*args):
  return _tkrTem.temSetCheckSum(*args)
temSetCheckSum = _tkrTem.temSetCheckSum

def temGetCheckSum():
  return _tkrTem.temGetCheckSum()
temGetCheckSum = _tkrTem.temGetCheckSum

def temEnableCable(*args):
  return _tkrTem.temEnableCable(*args)
temEnableCable = _tkrTem.temEnableCable

def temDisableCable(*args):
  return _tkrTem.temDisableCable(*args)
temDisableCable = _tkrTem.temDisableCable

def temIsCableEnabled(*args):
  return _tkrTem.temIsCableEnabled(*args)
temIsCableEnabled = _tkrTem.temIsCableEnabled

def temRstLastGtrc():
  return _tkrTem.temRstLastGtrc()
temRstLastGtrc = _tkrTem.temRstLastGtrc

def temLastGtrc(*args):
  return _tkrTem.temLastGtrc(*args)
temLastGtrc = _tkrTem.temLastGtrc

def temRstPulse():
  return _tkrTem.temRstPulse()
temRstPulse = _tkrTem.temRstPulse

def temRstDataFifo():
  return _tkrTem.temRstDataFifo()
temRstDataFifo = _tkrTem.temRstDataFifo

def temInit():
  return _tkrTem.temInit()
temInit = _tkrTem.temInit

def temStatus():
  return _tkrTem.temStatus()
temStatus = _tkrTem.temStatus

def temRegister():
  return _tkrTem.temRegister()
temRegister = _tkrTem.temRegister

def temMaskReg():
  return _tkrTem.temMaskReg()
temMaskReg = _tkrTem.temMaskReg

def temReset():
  return _tkrTem.temReset()
temReset = _tkrTem.temReset

def temR():
  return _tkrTem.temR()
temR = _tkrTem.temR

def temTreq():
  return _tkrTem.temTreq()
temTreq = _tkrTem.temTreq

def temTreq1():
  return _tkrTem.temTreq1()
temTreq1 = _tkrTem.temTreq1

def temDF():
  return _tkrTem.temDF()
temDF = _tkrTem.temDF

def rstOn(*args):
  return _tkrTem.rstOn(*args)
rstOn = _tkrTem.rstOn


